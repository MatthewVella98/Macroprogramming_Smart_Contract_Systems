program  
{ 
     @XOnMainSystem()
     {{
       function PropertyController_createProperty (
       id: string, propertyType: string, ownerID: string,isForSale:boolean,oracleResponseCode: string)
            @XOnChain()
            {{
                 /* Set an event. We pass the event name that we want to emit and some data */
                    this.tx.stub.setEvent('oracle_request_data', { id,k oracleResponseCode });

                 let property = new Property(id);
                 property.propertyType = propertyType;
                 property.assetOwner = ownerID;
                 property.isForSale = isForSale;
                 property.oracleResponseCode = oracleResponseCode;

                 /* Time must be deterministic for all peers - When the transaction was created.  */
                 property.dateStartRequest = this.tx.stub.getTxDate().getTime();

                 await property.save()

            }}

        transactionMessage("CreateProperty Success!");
     }}

     @XOnChain()
     {{
       function PropertyController___callback ( oracleRespondeCode: string,response: number ) {
          /* Querying the model using the responseCode */
          if (!oracleRespondeCode) {
        throw new Error('missing [oracleRespondeCode]');
          }
          console.log('Callback received');
          const valueResponse = await Property.query(Property, {
        'selector': {
          'oracleResponseCode': oracleRespondeCode
        }
          });

          /* Validation */
          if (!valueResponse || !valueResponse[0] || !valueResponse[0].id) {
        throw new Error('No registry can be updated');
          }

          /* Updating the model. */
          const model = new Property(valueResponse[0]);
          model.price = response;
          model.oracleResponseCode = '';
          model.dateOracleResponse = this.tx.stub.getTxDate().getTime();
          await model.save();

          console.log('[price] set after oracle response');
       }
     }}
  
     @XOnMainSystem()
     {{
      function PropertyController_updateForSale ( id:string, isForSale: boolean )
           @XOnChain()
            {{
            let property = await Property.getOne(id);
            console.log('Property:');
            console.log(Property);

            if (!property || !property.id) {
              throw new Error(`Property with id ${id} does not exist`);
            }

            /* Check if the Owner exists */
            const owner = await Participant.getOne(property.assetOwner);
            console.log('Property owner:');
            console.log(owner);

            if (!owner || !owner.id || !owner.identities) {
              throw new Error('Referenced owner participant does not exist in the ledger');
            }

            /* If the Participant is the actual owner of the property, the property can be updated */
            const ownerCurrentIdentity = owner.identities.filter(identity => identity.status === true)[0];
            if (ownerCurrentIdentity.fingerprint === this.sender) {
              console.log('Identity can update Property');
              property.isForSale = isForSale;
              await property.save();
            } else {
              throw new Error(`Identity ${this.sender} is not allowed to update Property just ${owner.name} ${ownerCurrentIdentity.fingerprint} can`);
            }

              }}

        transactionMessage("updateForSale Success!");
     }}

     @XOnMainSystem()
     {{
       function PropertyController_transferProperty ( id:string, to:string )
           @XOnChain()
           {{
                let property = await Property.getOne(id);

                /* Property exists check */
                if (!property || !property.id) {
                  throw new Error(`Property with id ${id} does not exist`);
                }

                /* Owner exists check */
                const owner = await Participant.getOne(property.assetOwner);
                if (!owner || !owner.id || !owner.identities) {
                  throw new Error('Referenced owner participant does not exist in the ledger');
                }
                /* Owner is Sender check */
                const ownerCurrentIdentity = owner.identities.filter(identity => identity.status === true)[0];
                if (ownerCurrentIdentity.fingerprint !== this.sender) {
                  throw new Error(`Identity ${this.sender} is not allowed to update Property just ${owner.name} ${ownerCurrentIdentity.fingerprint} can`);
                }

                /* Property is for sale check */
                if(property.isForSale){
                  property.assetOwner = to;
                  await property.save();
                  } else {
                  throw new Error(`The Property with ID ${property.id} is not for sale.`);
                  }
           }}

        transactionMessage("Transfer Property Success!");
     }}

      @XOnMainSystem()
      {{
       function PropertyController_getProperty ( id:string )
            @XOnChain()
            {{
                const existing = await Property.getOne(id);
                if (!existing || !existing.id) {
                    throw new Error(`No property exists with that ID ${id}`);
                }
                    return existing;
            }}
   
        transactionMessage("Get Property Success!");
      }}

     @XOnMainSystem()
     {{
      function ParticipantController_register ( id:string,name:string )
            @XOnChain()
            {{
              /* Retrieve to see if exists */
              const existing = await Participant.getOne(id);

              if (!existing || !existing.id) {
                let participant = new Participant();
                participant.id = id;
                participant.name = name || id;
                participant.msp = this.fullIdentity.getMSPID();

                /* Create a new identity */
                participant.identities = [{
                  fingerprint: this.sender,
                  status: true
                }];

                await participant.save();

              } else {
                throw new Error('Identity exists already, please call changeIdentity fn for updates');
              }
             }}

      transactionMessage("Register Participant Success!");
     }}

     @XOnMainSystem()
     {{
      function ParticipantController_get( id:string )
          @XOnChain()
          {{
              const existing = await Participant.getOne(id);
              if (!existing || !existing.id) {
              throw new Error(`No identity exists with that ID ${id}`);
              }
              return existing;
           }}

        transactionMessage("Get Participant Success!");
     }}
 

     @XOnMainSystem()
     {{
       function transactionMessage( message: string ) {
           console.log(message);
       }
     }}


     data Property
     {{
        @XOnlyOnChain public readonly type = 'io.worldsibu.property';
        @XOnlyOnChain public propertyType:string;
        @XOnlyOnChain public assetOwner:string;
        @XOnlyOnChain public isForSale: boolean;
        @XAll public price: number;
     }}

     data Participant
     {{
        @XOnlyOnChain public readonly type = 'io.worldsibu.examples.participant';
        @XOnlyOnChain public name: string;
        @XOnlyOnChain public msp: string;
        @XOnlyOnChain public identities: Array<FlatConvectorModel<x509Identities>>;
     }}

     data Participant_x509Identities
     {{
        @XOnlyOnChain public readonly type = 'io.worldsibu.examples.x509identity';
        @XOnlyOnChain public status: boolean;
        @XOnlyOnChain public fingerprint: string;
     }}
}




